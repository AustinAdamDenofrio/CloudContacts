@page "/contacts"
@attribute [Authorize]

@inject IContactDTOService ContactService
@rendermode InteractiveServer

<PageTitle>Cloud Contacts | Contacts</PageTitle>

<div class="d-flex align-items-center mt-3">
    <h1 class="">All Contacts</h1>
    <a href="contacts/create" class="ms-auto btn btn-primary rounded-pill">New Contact</a>

</div>

<div class="row g-3">
    <div class="col-12 col-lg-4">
        <div class="sideNav mb-3">
            <form>
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search" />
                    <button class="btn btn-primary">Search</button>
                </div>
            </form>
            <div class="mt-5">
                <label class="form-label">Category Filter</label>
                <select class="form-select">
                    <option value="">All Contacts</option>
                </select>
            </div>
        </div>
    </div>
    <div class="col-12 col-lg-8">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-1 g-3">
            @if (contacts.Any())
            {
                @foreach (ContactDTO contact in contacts)
                {
                    <div class="col" @key="contact.Id">
                        <ContactCard 
                        OnDelete="DeleteContact"
                        Contact="contact" 
                        />
                    </div>
                }

            }
            else
            {
                <div>
                    <h4>No Contacts found!</h4>
                    <p>
                        Add some contacts <a href="contacts/create">here</a>?
                    </p>
                </div>
            }

        </div>
    </div>
</div>



@code {
    #region parameter
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [SupplyParameterFromQuery]
    public int? CategoryId { get; set; }
    #endregion


    #region state
    private IEnumerable<ContactDTO> contacts = [];


    #endregion



    #region methods
    protected override async Task OnInitializedAsync()
    {
        UserInfo? userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        if (CategoryId is not null or 0)
        {
            contacts = await ContactService.GetContactsByCategoryIdAsync(CategoryId.Value, userInfo!.UserId);
        }
        else
        {
            contacts = await ContactService.GetContactsAsync(userInfo!.UserId);
        }

        try
        {

            contacts = await ContactService.GetContactsAsync(userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }


    // run delete method await DeleteContactAsync(int contactId, string userId)

    private async Task DeleteContact(int contactId)
    {
        try
        {

            UserInfo? userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            await ContactService.DeleteContactAsync(contactId, userInfo!.UserId);

            contacts = await ContactService.GetContactsAsync(userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    #endregion
}
