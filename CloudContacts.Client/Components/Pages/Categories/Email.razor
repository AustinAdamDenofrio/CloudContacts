@page "/categories/email/{categoryId:int}"
@rendermode InteractiveServer

@attribute [Authorize]

@inject ICategoryDTOService CategoryService
@inject NavigationManager Nav


<PageTitle>Categories || Email Contact</PageTitle>

<div class="card shadow-lg my-3">
    <div class="card-body">
        @if (emailData is not null)
        {
            <EmailForm 
                EmailData="emailData"
                OnSubmit="HandleSubmit" />

        }

    </div>
</div>




@code {

    #region parameters
    [Parameter]
    public int CategoryId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region state
    private EmailData? emailData;
    private UserInfo? userInfo;
    private CategoryDTO? category;
    #endregion


    #region methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            category = await CategoryService.GetCategoryByIdAsyc(CategoryId, userInfo!.UserId);
        }
        catch (Exception)
        {

            throw;
        }

        if (category is null)
        {
            Nav.NavigateTo("categories");
        }
        else
        {
            IEnumerable<string> emails = category.Contacts.Select(c => c.Email!);
            string recipients = string.Join("; ", emails);

            emailData = new EmailData()
                {
                    Recipients = recipients,
                    Subject = $"Group Message for {category.Name}"
                };
        }


    }

    private async Task HandleSubmit(EmailData formEmailData)
    {
        try
        {
            await CategoryService.EmailCategoryAsync(CategoryId, formEmailData, userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        Nav.NavigateTo("categories");

        //TODO: show the user a success or failure message

    }


    #endregion
}
