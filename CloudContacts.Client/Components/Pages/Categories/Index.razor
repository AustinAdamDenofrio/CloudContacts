@page "/categories"



@rendermode InteractiveServer
@attribute [Authorize]

@inject ICategoryDTOService CategoryService

<PageTitle>Categories</PageTitle>

<div class="container">
    <EditForm Model="formCategory" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <ul class="list-group my-3">
            <li class="list-group-item">
                <label class="form-label" for="categoryName">
                    Add a Category
                </label>
                <div class="d-flex gap-3">
                    <InputText class="form-control" placeholder="Category Name" @bind-Value="formCategory.Name"></InputText>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-floppy"></i>
                    </button>
                </div>
            </li>
        </ul>
    </EditForm>


    <CategoryAccordion Categories="categories"
                       OnCategoryUpdate="UpdateCategory"
                       OnCategoryDelete="DeleteCategory" />


</div>

@code {
    #region Component parameter
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion




    #region Component state
    private UserInfo? userInfo;
    private CategoryDTO formCategory = new CategoryDTO();
    private IEnumerable<CategoryDTO> categories = [];
    #endregion





    #region Component methods

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        categories = (await CategoryService.GetCategoryAsync(userInfo!.UserId)).ToList();
    }
    private async Task HandleSubmit()
    {
        try
        {
            await CategoryService.CreateCategoryAsync(formCategory, userInfo!.UserId);
            formCategory = new CategoryDTO();
            categories = await CategoryService.GetCategoryAsync(userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            await CategoryService.DeleteCategoriesAsync(categoryId, userInfo!.UserId);

            categories = await CategoryService.GetCategoryAsync(userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }


    private async Task UpdateCategory(CategoryDTO category)
    {
        try
        {
            await CategoryService.UpdateCategoryAsync(category, userInfo!.UserId);
            categories = await CategoryService.GetCategoryAsync(userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    #endregion


}
